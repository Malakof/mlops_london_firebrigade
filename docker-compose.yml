
version: '3.12'

services:
  base_image:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: myapp/base:latest  # Explicitly tag the built image
    # No command or ports needed, as we do not need to run this service

  api_gateway:
    build:
      context: .
      dockerfile: ./src/api/api_gateway/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - base_image
      - process_data_service
      - build_features_service
      - train_model_service
      - predict_service
      - mlflow_service
    networks:
      - my_network_for_api
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - DOCKER=1
      - PUSH_GATEWAY_ENABLED=True
      # - MLFLOW_ENABLED=True

  process_data_service:
    build:
      context: .
      dockerfile: ./src/api/microservices/process_data_service/Dockerfile
    ports:
      - "8001:8001"
    networks:
      - my_network_for_api
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - DOCKER=1
      - PUSH_GATEWAY_ENABLED=True
      # - MLFLOW_ENABLED=True
    depends_on:
      - base_image
      - pushgateway_service

  build_features_service:
    build:
      context: .
      dockerfile: ./src/api/microservices/build_features_service/Dockerfile
    ports:
      - "8002:8002"
    networks:
      - my_network_for_api
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - DOCKER=1
      - PUSH_GATEWAY_ENABLED=True
      # - MLFLOW_ENABLED=True
    depends_on:
      - base_image
      - pushgateway_service


  train_model_service:
    build:
      context: .
      dockerfile: ./src/api/microservices/train_model_service/Dockerfile
    ports:
      - "8003:8003"
    networks:
      - my_network_for_api
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - DOCKER=1
      - PUSH_GATEWAY_ENABLED=True
      - MLFLOW_ENABLED=True
    depends_on:
      - base_image
      - pushgateway_service
      - mlflow_service

  predict_service:
    build:
      context: .
      dockerfile: ./src/api/microservices/predict_service/Dockerfile
    ports:
      - "8004:8004"
    networks:
      - my_network_for_api
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - DOCKER=1
      - PUSH_GATEWAY_ENABLED=True
      - MLFLOW_ENABLED=True
    depends_on:
      - base_image
      - pushgateway_service
      - mlflow_service

  mlflow_service:
    build:
      context: .
      dockerfile: ./src/monitoring/mlflow/Dockerfile
    ports:
      - "9092:9092"
    networks:
      - my_network_for_api
    volumes:
      - ./data-mlflow:/app

  grafana_service:
    image: grafana/grafana:latest
    container_name: grafana_service
    ports:
      - '3000:3000'
    restart: unless-stopped
    volumes:
      - ./data-grafana:/var/lib/grafana
    depends_on:
      - prometheus_service

  prometheus_service:
    image: prom/prometheus:latest
    container_name: prometheus_service
    ports:
      - "9090:9090"
    networks:
      - my_network_for_api
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data-prometheus:/prometheus/data
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - pushgateway_service

  pushgateway_service:
    image: prom/pushgateway  
    container_name: pushgateway_service
    ports:
      - "9091:9091"
    networks:
      - my_network_for_api

networks:
  my_network_for_api:

